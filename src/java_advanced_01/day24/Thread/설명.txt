🧠 전체 구조 요약
Calculator: 공유 자원 (memory)을 가진 클래스

User1, User2: 각각 다른 방식으로 Calculator의 memory 값을 설정하는 스레드

ThreadEx02: main 메서드에서 두 스레드를 실행

🔧 Calculator 클래스
java
private int memory;
공유 자원인 memory를 정의

🔹 setMemory1(int memory) — 동기화 메서드
java
public synchronized void setMemory1(int memory)
synchronized 키워드로 메서드 전체를 동기화

한 번에 하나의 스레드만 접근 가능

Thread.sleep(2000)으로 2초간 대기 → 다른 스레드가 기다려야 함

🔹 setMemory2(int memory) — 동기화 블록
java
synchronized (this)
메서드 전체가 아닌 특정 블록만 동기화

this는 Calculator 객체 자체를 락(lock)으로 사용

두 방식 모두 동기화는 동일하게 작동하지만, 블록 방식은 더 유연하게 제어 가능

👤 User1 / User2 클래스
각각 Thread를 상속받아 스레드로 동작

setCalculator()로 공유 Calculator 객체를 주입받음

run() 메서드에서 memory 값을 설정

java
User1 → setMemory1(100)
User2 → setMemory2(200)
즉, User1은 동기화 메서드 방식으로, User2는 동기화 블록 방식으로 memory를 설정

🚀 ThreadEx02 (main 메서드)
java
Calculator calculator = new Calculator();
User1 user1 = new User1();
User2 user2 = new User2();
Calculator 객체 하나 생성 → 두 스레드가 공유

각각의 스레드에 Calculator 객체를 주입

start()로 두 스레드 실행

🔄 실행 흐름
user1.start() → setMemory1(100) 실행 → 2초 sleep

user2.start() → setMemory2(200) 실행 → 2초 sleep

두 스레드는 동기화된 Calculator 객체를 공유하므로 동시에 memory를 수정하지 않도록 락(lock)을 걸고 순차적으로 실행됨

🧪 실습 포인트
synchronized 메서드 vs 블록의 차이

공유 자원에 대한 스레드 동기화

Thread.sleep()을 통해 동시성 테스트